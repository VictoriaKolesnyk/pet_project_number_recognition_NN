import pandas as pd
import numpy as np
import timeit
import sklearn.metrics as sk_metrics
import keras.models as keras_models
import keras.layers as keras_layers
import keras.datasets as keras_datasets
import keras.utils as keras_utils
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras

# load dataset
mnist = tf.keras.datasets.mnist


#split on train and test data
(X_train, y_train), (X_test, y_test) = mnist.load_data()


#visualization of sample numbers
num_classes = 10
f, ax = plt.subplots(1, num_classes,figsize = (20,20))

for i in range (0,num_classes):
    sample = X_train[y_train == i][0]
    ax[i].imshow(sample, cmap = plt.cm.binary)
    ax[i].set_title('Lable: {}'.format(i),fontsize=16)
    
#normalizaton    
X_train = tf.keras.utils.normalize(X_train,axis=1)
X_test = tf.keras.utils.normalize(X_test,axis=1)

plt.imshow(X_train[0],cmap = plt.cm.binary)


img_size = 28
X_trainr = np.array(X_train).reshape(-1,img_size,img_size,1)
X_testr = np.array(X_test).reshape(-1,img_size,img_size,1)

print(X_train.shape, X_test.shape)

#model
model = keras_models.Sequential()

# 1 convolutional layer
model.add(keras_layers.Conv2D(64, kernel_size=(3, 3), activation="relu", input_shape= X_trainr.shape[1:]))
model.add(keras_layers.MaxPool2D(pool_size=(2, 2)))

# 1 convolutional layer

model.add(keras_layers.Conv2D(64, kernel_size=(3, 3),activation='relu'))
model.add(keras_layers.MaxPool2D(pool_size=(2, 2)))
model.add(keras_layers.Dropout(0.2))

# 3 convolutional layer

model.add(keras_layers.Conv2D(64, kernel_size=(3, 3),activation='relu'))
model.add(keras_layers.MaxPool2D(pool_size=(2, 2)))


# fully connected layer 1
model.add(keras_layers.Flatten())
model.add(keras_layers.Dense(64,activation='relu'))

#fully connected layer 2
model.add(keras_layers.Dense(32,activation='relu'))

# last fully connected layer
model.add(keras_layers.Dense(10,activation='softmax'))


model.summary()

model.compile(loss="sparse_categorical_crossentropy",
                  optimizer="adam",
                  metrics=["accuracy"])

model.fit(X_trainr, y_train, epochs=5,batch_size=100, shuffle=True)

model_evaluation = model.evaluate(X_testr, y_test, verbose=0)
model_evaluation


test_loss,test_acc = model.evaluate(X_testr,y_test)
print('test_loss',test_loss)
print('test_acc',test_acc)


prediction = model.predict(X_testr)
prediction

print(np.argmax(prediction[0]))

plt.imshow(X_test[0], cmap = plt.cm.binary)

print(np.argmax(prediction[120]))

plt.imshow(X_test[120], cmap = plt.cm.binary)

#digit recognition
import cv2
img = cv2.imread('img9.png')
plt.imshow(img, cmap = plt.cm.binary)

gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
resized = cv2.resize(gray, (28,28), interpolation = cv2.INTER_AREA)
newimage = tf.keras.utils.normalize(resized,axis=1)
newimage = np.array(newimage).reshape(-1,img_size,img_size,1)

prediction = model.predict(newimage)
print(np.argmax(prediction))

img5 = cv2.imread('_img5.png')
plt.imshow(img5)

gray = cv2.cvtColor(img5,cv2.COLOR_BGR2GRAY)
resized = cv2.resize(gray, (28,28), interpolation = cv2.INTER_AREA)
newimage = tf.keras.utils.normalize(resized,axis=1)
newimage = np.array(newimage).reshape(-1,img_size,img_size,1)

prediction = model.predict(newimage)
print(np.argmax(prediction))

img8 = cv2.imread('image8.png')
plt.imshow(img8)

gray = cv2.cvtColor(img8,cv2.COLOR_BGR2GRAY)
resized = cv2.resize(gray, (28,28), interpolation = cv2.INTER_AREA)
newimage = tf.keras.utils.normalize(resized,axis=1)
newimage = np.array(newimage).reshape(-1,img_size,img_size,1)

prediction = model.predict(newimage)
print(np.argmax(prediction))
